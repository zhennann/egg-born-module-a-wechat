{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/external \"require3\"","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/message.js","webpack://backend/./backend/src/common/wechat.js","webpack://backend/external \"crypto\"","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/message.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/meta.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,qC;;;;;;ACAA,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,oBAAoB,mBAAO,CAAC,CAAyB;;AAErD;;AAEA;AACA,iBAAiB,mBAAO,CAAC,CAAa;AACtC;AACA,mBAAmB,mBAAO,CAAC,EAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,eAAe,mBAAO,CAAC,EAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3BA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;;;;;;ACnBA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;ACFA;AACA;;;;;;;ACDA;AACA;AACA;;;;;;;ACFA;AACA;;;;;;;ACDA,gBAAgB,mBAAO,CAAC,CAAyB;AACjD,gBAAgB,mBAAO,CAAC,CAAyB;;AAEjD;AACA;AACA;AACA,KAAK,oFAAoF;AACzF,KAAK,kFAAkF;AACvF,KAAK,iFAAiF;AACtF;AACA,KAAK,mEAAmE,QAAQ,gBAAgB,EAAE,EAAE;AACpG,KAAK,oEAAoE,QAAQ,gBAAgB,EAAE,EAAE;AACrG;AACA;AACA;;;;;;;ACdA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACpBA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA,oBAAoB,mBAAO,CAAC,EAAqB;;AAEjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,yCAAyC;AAC1F;AACA;AACA;AACA;AACA,OAAO;AACP,kDAAkD,yCAAyC;AAC3F;AACA;AACA,iEAAiE,qBAAqB;AACtF;AACA;AACA,SAAS;AACT,yCAAyC,kBAAkB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,yCAAyC;AACrE;AACA;AACA;AACA;AACA,OAAO;AACP,+DAA+D,iEAAiE;AAChI;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,cAAc;AACd;;AAEA,6BAA6B,yCAAyC;AACtE;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA,OAAO;AACP,+DAA+D,iEAAiE;AAChI;AACA;AACA;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;AC/FA,eAAe,mBAAO,CAAC,EAAQ;AAC/B,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA,GAAG;AACH,kBAAkB,gEAAgE;AAClF,sCAAsC,oCAAoC;AAC1E;AACA;AACA,KAAK;AACL,GAAG;AACH,YAAY,uDAAuD;AACnE,gCAAgC,4BAA4B;AAC5D,GAAG;AACH;;;;;;;AC1BA,mC;;;;;;ACAA,gBAAgB,mBAAO,CAAC,EAAsB;AAC9C,gBAAgB,mBAAO,CAAC,EAAsB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;;;;;;AChBA;AACA;AACA;;AAEA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;;;;;;AC1BA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,kBAAkB;AAClB;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"require3\");","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // account\n  config.account = {};\n\n  // account.public\n  config.account.public = {\n    appID: '',\n    appSecret: '',\n    token: '',\n    encodingAESKey: '',\n    message: {\n      autoReply: '',\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n};\n","const version = require('./controller/version.js');\nconst message = require('./controller/message.js');\n\nmodule.exports = app => {\n  const routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n    // message\n    { method: 'get', path: 'message/index', controller: message, meta: { auth: { enable: false } } },\n    { method: 'post', path: 'message/index', controller: message, meta: { auth: { enable: false } } },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","const require3 = require('require3');\nconst WechatCrypto = require3('wechat-crypto');\nconst wechatUtils = require('../common/wechat.js');\n\nmodule.exports = app => {\n  class MessageController extends app.Controller {\n\n    async index() {\n      // query\n      const query = this.ctx.query;\n      // config\n      const config = this.ctx.config.account.public;\n      // encrypted\n      const encrypted = query.encrypt_type === 'aes';\n      // wechat crypto\n      const wechatCrypto = encrypted ? new WechatCrypto(config.token, config.encodingAESKey, config.appID) : null;\n      // parse\n      let messageIn;\n      if (this.ctx.method === 'GET') {\n        messageIn = await this._parseMessageGet({ query, config, encrypted, wechatCrypto });\n        // ok\n        this.ctx.status = 200;\n        this.ctx.type = 'text/plain';\n        this.ctx.body = messageIn.echostr;\n      } else {\n        messageIn = await this._parseMessagePost({ query, config, encrypted, wechatCrypto });\n        // handle\n        let resXML;\n        const messageOut = await this.ctx.service.message.index({ message: messageIn });\n        if (!messageOut) {\n          resXML = '';\n        } else {\n          resXML = wechatUtils.buildXML({ xml: messageOut });\n          if (encrypted) {\n            const wrap = {};\n            wrap.Encrypt = wechatCrypto.encrypt(resXML);\n            wrap.TimeStamp = wechatUtils.createTimeStamp();\n            wrap.Nonce = wechatUtils.createNonce();\n            wrap.MsgSignature = wechatCrypto.getSignature(wrap.TimeStamp, wrap.Nonce, wrap.Encrypt);\n            resXML = wechatUtils.buildXML({ xml: wrap });\n          }\n        }\n        // ok\n        this.ctx.status = 200;\n        this.ctx.type = 'text/xml';\n        this.ctx.body = resXML;\n      }\n    }\n\n    async _parseMessageGet({ query, config, encrypted, wechatCrypto }) {\n      // check if valid\n      let valid = false;\n      if (encrypted) {\n        valid = query.msg_signature === wechatCrypto.getSignature(query.timestamp, query.nonce, query.echostr);\n      } else {\n        valid = query.signature === wechatUtils.calcSignature({ options: [ config.token, query.timestamp, query.nonce ].sort() });\n      }\n      if (!valid) this.ctx.throw(401);\n      // decrypt\n      if (encrypted) {\n        const res = wechatCrypto.decrypt(query.echostr);\n        return { echostr: res.message };\n      }\n      return { echostr: query.echostr };\n    }\n\n    async _parseMessagePost({ query, config, encrypted, wechatCrypto }) {\n      // xml raw\n      let xmlRaw;\n      if (typeof this.ctx.request.body === 'string') {\n        xmlRaw = this.ctx.request.body;\n      } else {\n        const payload = await this.ctx.getPayload();\n        xmlRaw = payload.toString();\n      }\n      // parse xml\n      let xml = await wechatUtils.parseXML({ xml: xmlRaw });\n      // check if valid\n      let valid = false;\n      if (encrypted) {\n        valid = query.msg_signature === wechatCrypto.getSignature(query.timestamp, query.nonce, xml.Encrypt);\n      } else {\n        valid = query.signature === wechatUtils.calcSignature({ options: [ config.token, query.timestamp, query.nonce ].sort() });\n      }\n      if (!valid) this.ctx.throw(401);\n      // decrypt\n      if (encrypted) {\n        const res = wechatCrypto.decrypt(xml.Encrypt);\n        xml = await wechatUtils.parseXML({ xml: res.message });\n      }\n      return xml;\n    }\n\n  }\n  return MessageController;\n};\n\n","const crypto = require('crypto');\nconst require3 = require('require3');\nconst bb = require3('bluebird');\nconst xml2js = require3('xml2js');\n\nmodule.exports = {\n  createNonce() {\n    return Math.random().toString(36).substr(2, 15);\n  },\n  createTimeStamp() {\n    return parseInt(new Date().getTime() / 1000) + '';\n  },\n  calcSignature({ options, join = '', hash = 'sha1' }) {\n    const hashsum = crypto.createHash(hash);\n    hashsum.update(options.join(join));\n    return hashsum.digest('hex');\n  },\n  async parseXML({ xml, trim = true, explicitArray = false, explicitRoot = false }) {\n    const parser = new xml2js.Parser({ trim, explicitArray, explicitRoot });\n    return await bb.fromCallback(cb => {\n      parser.parseString(xml, cb);\n    });\n  },\n  buildXML({ xml, cdata = true, headless = true, rootName = 'xml' }) {\n    return (new xml2js.Builder({ cdata, headless, rootName })).buildObject(xml);\n  },\n};\n","module.exports = require(\"crypto\");","const version = require('./service/version.js');\nconst message = require('./service/message.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    message,\n  };\n  return services;\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n    }\n\n    async init(options) {\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Message extends app.Service {\n\n    async index({ message }) {\n      // event\n      const res = await this.ctx.meta.event.invoke({\n        module: moduleInfo.relativeName,\n        name: 'wechatMessage',\n        data: { message },\n      });\n      if (res) return res;\n      // default reply\n      return {\n        ToUserName: message.FromUserName,\n        FromUserName: message.ToUserName,\n        CreateTime: new Date().getTime(),\n        MsgType: 'text',\n        Content: this.ctx.config.account.public.message.autoReply,\n      };\n    }\n\n\n  }\n\n  return Message;\n};\n","module.exports = app => {\n  const models = {\n  };\n  return models;\n};\n","module.exports = app => {\n  // const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n      },\n      functions: {\n      },\n    },\n    validation: {\n      validators: {\n      },\n      keywords: {},\n      schemas: {\n      },\n    },\n    event: {\n      declarations: {\n        wechatMessage: 'Wechat Message',\n      },\n    },\n  };\n  return meta;\n};\n"],"sourceRoot":""}